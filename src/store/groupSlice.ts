import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../store";
import { Group } from "@/interfaces/task";

export interface Groups {
    [key: string]: Group;
  };
const initialState: Groups = {
  "sample_group_1": {
    name: "To Do",
    parent: "sample_board_1",
    color: "red",
    tasks: [
      "task_1",
      "long",
      "due"
    ],
  },
  "sample_group_2": {
    name: "Doing",
    parent: "sample_board_1",
    color: "green",
    tasks: [
      "task_2",
      "members",
      "comment"
    ],
  },
  "sample_group_3": {
    name: "Done",
    parent: "sample_board_1",
    color: "blue",
    tasks: [
      "task_3",
      "markdown"
    ],
  },
  "unneeded_group": {
    name: "Uneeded",
    parent: "sample_board_1",
    color: "teal",
    tasks: [
      "uneeded_1",
      "uneeded_2",
      "uneeded_3",
      "uneeded_4",
      "uneeded_5",
      "uneeded_6",
      "uneeded_7",
      "uneeded_8",
      "uneeded_9",
      "uneeded_10"
    ],
  }
};

export const GroupSlice = createSlice({
  name: "projects",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setGroup: (state, action: PayloadAction<[string, Group]>) => {
      action.payload[0] in state ? state[action.payload[0]] = action.payload[1] : null
    },
    addGroup: (state, action: PayloadAction<[string, string, string, string]>) => {
      state[action.payload[1]] = {
          name: action.payload[2],
          parent: action.payload[0],
          color: action.payload[3],
          tasks: [
          ],
      }
      console.log("Group", state)
    },
    removeGroup: (state, action: PayloadAction<string>) => {
      delete state[action.payload]
    },
    setTasks: (state, action: PayloadAction<[string, string[]]>) => {
      action.payload[0] in state ? state[action.payload[0]].tasks = action.payload[1] : null
    },
    addTaskToGroup: (state, action: PayloadAction<[string, string]>) => {
      action.payload[0] in state ? state[action.payload[0]].tasks.push(action.payload[1]) : null
    },
    setGroupColor: (state, action: PayloadAction<[string, string]>) => {
      action.payload[0] in state ? state[action.payload[0]].color = action.payload[1] : null
    },
    removeTaskFromGroup: (state, action: PayloadAction<[string, string]>) => {
      if (action.payload[0] in state) {
        let temp = state[action.payload[0]].tasks
        let ind = temp.indexOf(action.payload[1])
        temp.splice(ind, 1)
        state[action.payload[0]].tasks = temp
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const {
  setGroup,
  addGroup,
  removeGroup,
  setTasks,
  addTaskToGroup,
  setGroupColor,
  removeTaskFromGroup
} = GroupSlice.actions;
export const selectGroups = (state: RootState) => state.groups;

export default GroupSlice.reducer;
