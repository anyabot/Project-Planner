import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../store";
import { TaskData, GroupData } from "@/interfaces/task";

export interface State {
  index: number
  groups: GroupData[];
  model: TaskData | null;
}

const initialState: State = {
  index: 2,
  model: null,
  groups: [
    {
      name: "Urgent",
      icon: "heartbeat",
      color: "red",
      tasks: [
        { name: "Default 0", id: 0 },
        
      ],
    },
    {
      name: "Review",
      icon: "heartbeat",
      color: "green",
      tasks: [
        { name: "Default 1", id: 1 },
      ],
    },
  ],
};

export const EnemySlice = createSlice({
  name: "state",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setGroups: (state, action: PayloadAction<GroupData[]>) => {
      state.groups = action.payload;
    },
    setTasks: (state, action: PayloadAction<[number, TaskData[]]>) => {
      state.groups[action.payload[0]].tasks = action.payload[1];
    },
    addItem: (state, action: PayloadAction<number>) => {
      state.groups[action.payload].tasks = [...state.groups[action.payload].tasks, { name: `Default ${state.index}`, id: state.index },]
      state.index = state.index + 1
    },
    addGroup: (state, action: PayloadAction<number>) => {
      state.groups = [...state.groups.slice(0, action.payload), {
        name: "Temp",
        icon: "heartbeat",
        color: "gray",
        tasks: [
        ],
      }, ...state.groups.slice(action.payload)]
    },
    addGroupLast: (state) => {
      state.groups = [...state.groups, {
        name: "Temp",
        icon: "heartbeat",
        color: "gray",
        tasks: [
        ],
      }]
    },
    setGroupColor: (state, action: PayloadAction<[number, string]>) => {
      state.groups[action.payload[0]].color = action.payload[1]
    },
    setModel: (state, action: PayloadAction<TaskData>) => {
      state.model = action.payload
    },
    closeModel: (state) => {
      state.model = null
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { setGroups, setTasks, addItem, addGroup, addGroupLast, setGroupColor, setModel, closeModel } = EnemySlice.actions;
export const selectGroups = (state: RootState) => state.state.groups;
export const selectModel = (state: RootState) => state.state.model;

export default EnemySlice.reducer;
