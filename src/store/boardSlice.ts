import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../store";
import { Board } from "@/interfaces/task";

export interface Boards {
  active: string | null;
  boards: {
    [key: string]: Board
  };
}

const initialState: Boards = {
  active: null,
  boards: {
    "sample_board_1": { name: "Sample Board", parent: "sample", groups: ["sample_group_1", "sample_group_2", "sample_group_3", "unneeded_group"], tags: {
      "sample_tag_1": { name: "Urgent", color: "red" },
      "sample_tag_2": { name: "React", color: "green" },
      "sample_tag_3": { name: "UI", color: "blue" }
    }  },
    "empty_board_1": { name: "Empty Board", parent: "sample", groups: [], tags: {} },
    "empty_board_2": { name: "Empty Board", parent: "empty", groups: [], tags: {}  },
    "long_board": { name: "Board With a Very Very Very Very Very Long Name", parent: "sample", groups: [], tags: {} },
  },
};

export const BoardSlice = createSlice({
  name: "boards",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setActiveBoard: (state, action: PayloadAction<string | null>) => {
      state.active = action.payload;
    },
    addBoard: (state, action: PayloadAction<[string, string, string]>) => {
      state.boards[action.payload[0]] = { name: action.payload[1], parent: action.payload[2], groups: [""], tags: {} }
    },
    renameBoard: (state, action: PayloadAction<[string, string]>) => {
      action.payload[0] in state.boards ? state.boards[action.payload[0]].name = action.payload[1] : null
    },
    deleteBoard: (state, action: PayloadAction<string>) => {
      delete state.boards[action.payload]
    },
    addGroupToBoard: (state, action: PayloadAction<[string, string]>) => {
      action.payload[0] in state.boards ? state.boards[action.payload[0]].groups.push(action.payload[1]) : null
    },
    addGroupToBoardAt: (state, action: PayloadAction<[string, string, number]>) => {
      if (action.payload[0] in state.boards) {
        let temp = state.boards[action.payload[0]].groups
        temp = [
          ...temp.slice(0, action.payload[2]),
          action.payload[1],
          ...temp.slice(action.payload[2]),
        ];
        state.boards[action.payload[0]].groups = temp
      } 
    },
    removeBoard: (state, action: PayloadAction<string>) => {
      delete state.boards[action.payload]
      if (action.payload === state.active) state.active = null
    },
    removeGroupFromBoard: (state, action: PayloadAction<[string, string]>) => {
      if (action.payload[0] in state.boards) {
        let temp = state.boards[action.payload[0]].groups
        let ind = temp.indexOf(action.payload[1])
        temp.splice(ind, 1)
      }
      
    },
    addTag: (state, action: PayloadAction<[string, string, string, string]>) => {
      if (action.payload[0] in state.boards) {
        state.boards[action.payload[0]].tags[action.payload[1]] = ({ name: action.payload[2], color: action.payload[3] })
      }
    },
    removeTag: (state, action: PayloadAction<[string, string]>) => {
      if (action.payload[0] in state.boards) {
        delete state.boards[action.payload[0]].tags[action.payload[1]]
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const {
  setActiveBoard,
  addBoard,
  renameBoard,
  deleteBoard,
  addGroupToBoard, addGroupToBoardAt, removeGroupFromBoard,
  removeBoard,
  addTag,
  removeTag
} = BoardSlice.actions;
export const selectBoards = (state: RootState) => state.boards.boards;
export const selectActiveBoard = (state: RootState) => state.boards.active;

export default BoardSlice.reducer;
